---
version: "3"

env:
  PY_PM: poetry
  PY_RUNNER: poetry run
  # yamllint disable-line rule:empty-values
  TF_AUTOAPPROVE:
  # TF_AUTOAPPROVE: -auto-approve
  TERRAFORM_EXEC: terraform

tasks:
  default:
    cmds:
      - task -l

  init:
    desc: "Initialize deployment"
    deps:
      - task: terraform-init

  ################################################################################
  #
  # Terraform
  #
  ################################################################################
  terraform-init:
    desc: "Initialize Terraform"
    cmds:
      - ${TERRAFORM_EXEC} init -upgrade

  plan:
    desc: "Plan the changes"
    cmds:
      - ${TERRAFORM_EXEC} plan

  apply:
    desc: "Apply Terraform changes"
    cmds:
      - ${TERRAFORM_EXEC} apply $TF_AUTOAPPROVE

  output:
    desc: "Show Terraform output"
    cmds:
      - ${TERRAFORM_EXEC} output

  destroy:
    desc: "Destroy Terraform state"
    cmds:
      - ${TERRAFORM_EXEC} destroy $TF_AUTOAPPROVE
  ################################################################################
  #
  # Ansible
  #
  ################################################################################

  ansible-init:
    desc: "Initialize Ansible"
    cmds:
      - echo "No Ansible support"

  ################################################################################
  #
  # Post deployment
  #
  ################################################################################
  ssh:
    desc: "SSH into the instance"
    cmds:
      - >
          ssh
          -l $(${TERRAFORM_EXEC} output -json | jq -r '.ssh_user.value')
          -i $(${TERRAFORM_EXEC} output -json | jq -r '.ssh_key.value')
          $(${TERRAFORM_EXEC} output -json | jq -r '.IPv4.value[0]')
    interactive: true
